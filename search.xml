<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用存储过程水平分表</title>
      <link href="/archives/2e493eb7.html"/>
      <url>/archives/2e493eb7.html</url>
      
        <content type="html"><![CDATA[<p>​    我们经常会遇到一些数据表，数据量过大，比如日志表，每天产生几十万条数据，这样积累下来非常不利于数据库查询和维护，有时候甚至连<code>select count(*) from table a</code> 都查不出来，为避免这种情况产生，通常会按照数据创建时间，来按年按月或者按季度进行分表，原表只保留几个月的数据。如下所示，用存储过程来进行处理。</p><p>​    逻辑 就是 先创建分表，结构和原表相同，然后再插入数据，再删除原表插入历史表的数据。</p><h2 id="分表存储过程"><a href="#分表存储过程" class="headerlink" title="分表存储过程"></a>分表存储过程</h2><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DEFINER=`XXX`@`%` PROCEDURE `up_clear_table_a`()BEGIN    -- 自动前30天前的数据到历史表中    DECLARE v_stat_date DATE;    DECLARE v_table_name VARCHAR(50);    DECLARE v_str VARCHAR(2000);    SET v_stat_date=DATE_SUB(CURRENT_DATE(),INTERVAL 30 DAY);    SET v_table_name=CONCAT('table_a_',DATE_FORMAT(v_stat_date,'%Y'));           SET v_str=CONCAT('create table if not exists ',v_table_name,'(         id varchar(40) NOT NULL DEFAULT '''' COMMENT ''id'',         type tinyint(4) DEFAULT ''0'' COMMENT ''类型'',         remark varchar(255) DEFAULT '''',         state tinyint(4) DEFAULT ''0'' COMMENT ''状态'',         created_at datetime DEFAULT CURRENT_TIMESTAMP COMMENT ''创建时间'',         created_operator_id varchar(40) DEFAULT '''' COMMENT ''创建人'',         created_operator_name varchar(40) DEFAULT '''' COMMENT ''创建人名称'',         PRIMARY KEY (id),       ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=''表''');           SET @sql=v_str;    PREPARE stmt FROM @sql;     EXECUTE stmt;      DEALLOCATE PREPARE stmt;            SET v_str=CONCAT('insert into ',v_table_name,'          select * from table_a where created_at>=''',v_stat_date,''' and created_at<date_add(''',v_stat_date,''',interval 1 day)');    SET @sql=v_str;    PREPARE stmt FROM @sql;     EXECUTE stmt;      DEALLOCATE PREPARE stmt;                DELETE FROM table_a    WHERE created_at>=v_stat_date AND created_at<DATE_ADD(v_stat_date,INTERVAL 1 DAY);    END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><ul><li>也可以使用 <code>create TABLE if not exists table_b like table_a;</code>来进行复制表，只复制表结构不复制数据；</li><li><code>if not exists</code> 是必须要写的，不然报错的话就执行不下去了；</li><li>单引号 两边都需要加个单引号</li></ul><h3 id="PREPARE-预处理语句"><a href="#PREPARE-预处理语句" class="headerlink" title="PREPARE 预处理语句"></a>PREPARE 预处理语句</h3><pre class="line-numbers language-msyql"><code class="language-msyql">PREPARE stmt FROM @sql; EXECUTE stmt;  DEALLOCATE PREPARE stmt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这三句是固定式语句，第一句式 预定义好动态sql语句 stmt，第二句毫无疑问式执行语句，第三局是删除预定义语句stmt。</p><p>DEALLOCATE 英文翻译就是 <code>释放; 解除分配; 释放游标; 删除一个准备好的查询; 归还;</code></p>]]></content>
      
      
      <categories>
          
          <category> 存储过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 水平分表 </tag>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql字符串拆分为列数据</title>
      <link href="/archives/fc8e7585.html"/>
      <url>/archives/fc8e7585.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql字符串拆分为列数据"><a href="#mysql字符串拆分为列数据" class="headerlink" title="mysql字符串拆分为列数据"></a>mysql字符串拆分为列数据</h1><p>有些时候，我们需要把字符串行转为列，这时候我们可以通过mysql.help_topic表来协助操作，help_topic_id 是从零开始的整数自增列。</p><p>mysql.help_topic表是数据库mysql下的一个表，可以用 <code>desc help_topic</code>命令看到表的定义；</p><p><img src="https://cdn.jsdelivr.net/gh/LuoShenKui/cdn/img/help_topic.png"></p><p>需要注意的是，转为的列数据的行数不得超过mysql.help_topic.help_topic_id的最大值；也可用用其他从0开始的整数自增列（中间不能有跳跃）来代替此字段；</p><h2 id="例：把“广东-江西-海南-湖南-安徽”-字符串拆分为列数据；"><a href="#例：把“广东-江西-海南-湖南-安徽”-字符串拆分为列数据；" class="headerlink" title="例：把“广东,江西,海南,湖南,安徽” 字符串拆分为列数据；"></a>例：把“广东,江西,海南,湖南,安徽” 字符串拆分为列数据；</h2><pre class="line-numbers language-mysql"><code class="language-mysql"> SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(a.addr,',',b.help_topic_id+1),',',-1) as addr FROM (SELECT '广东,江西,海南,湖南,安徽' as addr) a JOIN mysql.help_topic b on b.help_topic_id<(LENGTH(a.addr)-LENGTH(REPLACE(a.addr,',',''))+1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/LuoShenKui/cdn/img/provice.png"></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>如果字符串最后也有一个逗号，则会额外多拆出来一个空字符串列，这时可以把on条件后面的+1给去掉；</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="SUBSTRING-INDEX（str-delim-count）"><a href="#SUBSTRING-INDEX（str-delim-count）" class="headerlink" title="SUBSTRING_INDEX（str,delim,count）"></a><strong>SUBSTRING_INDEX（str,delim,count）</strong></h4><ul><li>str 是字符串，这里是 addr ； delim 是分隔符，这里是逗号；count是计数。</li><li>返回 字符串str的第count 出现的分隔符的之前（后）的数据；</li><li>如果count 是正数，则是返回第 count 个字符左边的字符串（从左往右）。</li><li>如果count 是负数，则是返回第 （number 的绝对值）个字符右边的字符串（从右往左）。</li></ul><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p><code> SELECT SUBSTRING_INDEX("广东,江西,海南,湖南,安徽",',',2)</code> </p><p>结果是 <code>广东,江西</code></p><p> ``SELECT SUBSTRING_INDEX(“广东,江西,海南,湖南,安徽”,’,’,-2)`</p><p>结果是 <code>湖南,安徽</code> </p><p>这里是采用先取左列数据，再取右边第一个数据，就可以得到第N个数据；</p><p> <code>SELECT SUBSTRING_INDEX(SUBSTRING_INDEX("广东,江西,海南,湖南,安徽",',',2),',',-1)</code> </p><p>结果是 <code>江西</code></p><h4 id="length-str-函数"><a href="#length-str-函数" class="headerlink" title="length(str)函数"></a>length(str)函数</h4><ul><li>length()函数用于获取字符串的长度；</li><li>一个汉字算3个字符，一个数字或字母算一个字符；</li></ul><h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h5><p> <code>SELECT LENGTH("广东,江西")</code>结果是13。</p><h4 id="replace-a-b-c"><a href="#replace-a-b-c" class="headerlink" title="replace(a,b,c)"></a>replace(a,b,c)</h4><ul><li>将字符串a中的b 替换为c;</li><li>a,b,c 均为字符串；</li></ul><h5 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT replace("广东,江西,海南,湖南,安徽",",","、")</code> </p><p>结果是 <code>广东、江西、海南、湖南、安徽</code></p><h2 id="扩展应用：查询-某段日期-的列数据；"><a href="#扩展应用：查询-某段日期-的列数据；" class="headerlink" title="扩展应用：查询 某段日期 的列数据；"></a>扩展应用：查询 某段日期 的列数据；</h2><pre class="line-numbers language-mysql"><code class="language-mysql">select date_format(date_sub('2021-07-12', interval help_topic_id day),'%Y-%m-%d') as dates from  mysql.help_topic   where  help_topic_id<=DATEDIFF('2021-07-12','2021-06-01') ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/LuoShenKui/cdn/img/date.png"></p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul><li>这条语句经常用于  查询很长一段日期的统计数据，如某段时间内每天的消费数据。由于存在意外情况，某天可能没数据，但是也是要展示，可以用这条语句查询 作为主表来left join;</li></ul><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><h4 id="date-sub-date-INTERVAL-expr-type-函数"><a href="#date-sub-date-INTERVAL-expr-type-函数" class="headerlink" title="date_sub (date,INTERVAL expr type) 函数"></a>date_sub (date,INTERVAL expr type) 函数</h4><ul><li>date是日期，expr是 时间间隔，type是时分秒日周月年等，详见<a href="https://www.runoob.com/sql/func-date-sub.html">MySQL DATE_SUB()</a> 函数用法 ，这里不再解释了；</li></ul><h5 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT date_sub('2021-07-12', interval 2 day);</code></p><p>结果是 <code>2021-07-10</code></p><h4 id="date-format-date-format"><a href="#date-format-date-format" class="headerlink" title="date_format(date,format)"></a>date_format(date,format)</h4><ul><li>date 日期,format 是格式，年月日 是 ‘%Y-%m-%d’。其余字段详见 <a href="https://www.runoob.com/sql/func-date-format.html">MySQL DATE_FORMAT() 函数</a></li></ul><h5 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT DATE_FORMAT(CURRENT_DATE(),"%Y-%m-%d %H:%i:%s")</code></p><h4 id="DATEDIFF-date1-date2"><a href="#DATEDIFF-date1-date2" class="headerlink" title="DATEDIFF(date1,date2)"></a>DATEDIFF(date1,date2)</h4><ul><li>date1和date2 是日期，返回 date1 和date2 之间的天数,即  date1-date2 的天数;</li></ul><h5 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT DATEDIFF('2021-07-12','2021-07-10')</code> </p><p>结果是 <code>2</code> </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> help_topic </tag>
            
            <tag> substring_index </tag>
            
            <tag> date_sub </tag>
            
            <tag> datediff </tag>
            
            <tag> 字符串转列操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客版本更新日志</title>
      <link href="/archives/5610cf1c.html"/>
      <url>/archives/5610cf1c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本篇用于介绍本博客网站更新的日志。</p><h2 id="版本更新记录"><a href="#版本更新记录" class="headerlink" title="版本更新记录"></a>版本更新记录</h2><h3 id="20210711"><a href="#20210711" class="headerlink" title="- 20210711"></a>- 20210711</h3><ul><li>备案成功！</li><li>双备份成功！接下来进入稳定期!</li></ul><h3 id="20210619"><a href="#20210619" class="headerlink" title="- 20210619"></a>- 20210619</h3><ul><li>趁着阿里云618活动买了个服务器，把备案给搞起来，网站命名比较严格，等待审核中；</li></ul><h3 id="20210613"><a href="#20210613" class="headerlink" title="- 20210613"></a>- 20210613</h3><ul><li><p>倒腾了几天，博客正式上线；</p></li><li><p>申请了域名，解析到个人github服务器页面上；</p></li><li><p>向百度和谷歌递交了收录请求，谷歌第二天就收录了，分析数据也有了，百度迟迟未收录！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建设</title>
      <link href="/archives/36b0b24c.html"/>
      <url>/archives/36b0b24c.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​    一时兴起，倒腾了几天终于把个人博客弄得差不多了，后续再修修补补就可以了。</p><p>​    本博客基于<strong>Hexo</strong>框架搭建，用到了<strong>hexo-theme-matery</strong> 主体，仿照<a href="https://sunhwee.com/posts/6e8839eb.html">洪卫大佬</a>的详细介绍，一步步走下来就可以了。下面我介绍一下我操作过程中遇到的问题，供大家参考。</p><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><h3 id="1-博客文件名称"><a href="#1-博客文件名称" class="headerlink" title="1.博客文件名称"></a>1.博客文件名称</h3><p>​    如果是直接从github上下载 <a href="https://github.com/shw2018/hexo-theme-matery">hexo-theme-matery</a>源码，如果下载的是zip格式，则是会带 master等分支名称，下载解压完之后记得要去掉分支名称。git clone 的话就没这个问题。</p><h3 id="2-依赖github"><a href="#2-依赖github" class="headerlink" title="2.依赖github"></a>2.依赖github</h3><p>​    根目录下的_config.yml 文件中的依赖，有两个注意点：</p><ul><li>一个是仓库要写成SSH格式的，不要写成https 格式的，如果写成 <a href="https://github.com/XXXX.git">https://github.com/XXXX.git</a> 这种格式的，则在你提交更新的时候，会让你输入登录密码（<del>十分痛苦！</del>）。</li><li>分支要写成master或者是main,跟你的仓库保持一致，要么改配置这里，要么改github 仓库的分支；</li></ul><pre class="line-numbers language-Yml"><code class="language-Yml">deploy: type: git repository: git@github.com:LuoShenKui/LuoShenKui.github.io.git branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置修改注意事项"><a href="#3-配置修改注意事项" class="headerlink" title="3. 配置修改注意事项"></a>3. 配置修改注意事项</h3><p>​    注意修改配置时：</p><ul><li>冒号需要是英文的，不能是中文的。</li><li>冒号与后续的配置要隔开一个空格！</li><li>不要用TXT文件打开配置进行修改，最好用VSCODE之类的软件打开。（假设你用txt修改，然后生成网页的时候报错了，你就知道痛苦了！找不到哪里有问题！）</li><li>VSCODE 要单独关闭页面才会提示保存，如果直接关闭软件是不会保存的。</li></ul><h3 id="4-LOGO设计"><a href="#4-LOGO设计" class="headerlink" title="4.LOGO设计"></a>4.LOGO设计</h3><p>​    我是拿画图工具直接画了一个，避免各种问题，后续再替换掉吧（笑）。注意logo文件不要太大。</p><h3 id="5-设置B站链接"><a href="#5-设置B站链接" class="headerlink" title="5.设置B站链接"></a>5.设置B站链接</h3><p>​    我去 <a href="https://fontawesome.com/icons">Font Awesome</a> 里没有找到B站的图标，就用了fa-bootstrap 的图标。</p><pre class="line-numbers language-ejs"><code class="language-ejs"><% if (theme.socialLink.bilibili) { %>    <a href="<%= theme.socialLink.bilibili %>" class="tooltipped" target="_blank" data-tooltip="关注我的B站: <%= theme.socialLink.bilibili %>" data-position="top" data-delay="50">        <i class="fab fa-bootstrap">站</i>    </a><% } %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-live2d问题"><a href="#6-live2d问题" class="headerlink" title="6.live2d问题"></a>6.live2d问题</h3><p>​    我设置了live2d,但是在右边的话会遮挡按钮，在配置里改到左边就可以了。</p><h3 id="7-文章编写"><a href="#7-文章编写" class="headerlink" title="7.文章编写"></a>7.文章编写</h3><ul><li>表头也要是冒号+空格的方式；</li></ul><h3 id="8-谷歌验证域名所有权问题"><a href="#8-谷歌验证域名所有权问题" class="headerlink" title="8.谷歌验证域名所有权问题"></a>8.谷歌验证域名所有权问题</h3><ul><li>谷歌验证DNS的时候，填写解析的时候由于会跟@解析冲突，可以把解析线路改为境外，不要写成谷歌。</li><li>添加顺序不能变！先输入主机记录@，再选择TXT记录类型，然后再复制TXT记录进入记录值内。</li></ul><h3 id="9-域名和备案"><a href="#9-域名和备案" class="headerlink" title="9.域名和备案"></a>9.域名和备案</h3><ul><li>域名和服务器我选的都是阿里云的，由于是首单用户，优惠还可以；</li><li>备案就取名要求比较严格，记得不要乱取；</li><li><strong>备案时一定要关闭网站</strong>，我第一次就因为这个原因失败了！最好也关闭讨论区。</li></ul><h3 id="10-谷歌分析"><a href="#10-谷歌分析" class="headerlink" title="10. 谷歌分析"></a>10. 谷歌分析</h3><ul><li>谷歌分析有数据了！页面也是第二天就收录了！</li></ul><h3 id="11-coding-双备份"><a href="#11-coding-双备份" class="headerlink" title="11.coding 双备份"></a>11.coding 双备份</h3><ul><li><p>coding 部署网站需要开通腾讯云，而且部署成功之后的链接基本不能用，太长了太乱了，如果没有购买自定义域名的话<strong>不建议</strong>部署coding！</p></li><li><p>自定义域名最好添加两个，一个带 <code>www.</code>，一个不带 <code>www.</code></p></li><li><p>自定义域名前腾讯要求国内服务器必须已备案完成！</p></li></ul><h3 id="12-图片"><a href="#12-图片" class="headerlink" title="12. 图片"></a>12. 图片</h3><ul><li>图片使用picgo图床，还算方便；</li></ul><h3 id="13-备份"><a href="#13-备份" class="headerlink" title="13. 备份"></a>13. 备份</h3><ul><li>由于博客本身带有各种密钥，所以不适合放在公开仓库里，可以在github上建个私有仓库进行存放；</li><li>前几天硬盘突然分区损坏（用了4年多了！<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>），无奈格式化，导致从备份仓库上下载下来的数据少了很多（如node_modules文件夹被过滤掉了），无奈再次手动下载更新了一遍。。。所以最好还是定时全部打包备份一遍。</li></ul><h3 id="14-百度收录"><a href="#14-百度收录" class="headerlink" title="14. 百度收录"></a>14. 百度收录</h3><ul><li>如果你百度站点是带www的，而你站点url 是不带 www 的，此时使用主动推送的话，可能会显示提交失败，站点改成带www的就可以了（百度已提交的站点改不了！），或者不用主动推送也是可以的；</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>​    其他问题可在评论区指出，大家一起学习。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> GitHub </tag>
            
            <tag> hexo </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
