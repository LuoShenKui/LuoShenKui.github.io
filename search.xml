<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>帆软查询条件限制1个月！</title>
      <link href="/archives/9c5ee06b.html"/>
      <url>/archives/9c5ee06b.html</url>
      
        <content type="html"><![CDATA[<p>查询条件包含：开始日期，结束日期等等</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stat_date <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_stat_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> end_date <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_end_date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tcname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_tcname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rsname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_rsname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> orgname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_orgname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_type"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_source"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> startD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>stat_date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> endD   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>end_date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> days <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>endD<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startD<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>days<span class="token operator">></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>tcname<span class="token operator">!=</span><span class="token string">''</span> <span class="token operator">||</span> rsname<span class="token operator">!=</span><span class="token string">''</span> <span class="token operator">||</span> orgname<span class="token operator">!=</span><span class="token string">''</span> <span class="token operator">||</span> type<span class="token operator">!=</span><span class="token string">''</span> <span class="token operator">||</span> source<span class="token operator">!=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">_g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parameterCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"查询时间超过一个月的必须要包含其他条件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">_g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parameterCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简要如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stat_date <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_date1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> end_date <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">getWidgetByName</span><span class="token punctuation">(</span><span class="token string">"p_date2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> startD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>stat_date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> endD   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>end_date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> days <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>endD<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startD<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>days<span class="token operator">></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"查询时间不能超过1个月！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">_g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parameterCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 帆软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 帆软 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>帆软 mysql 匹配、环比、同比，隐藏手机号及时间计算</title>
      <link href="/archives/5bf850a8.html"/>
      <url>/archives/5bf850a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-匹配、环比、同比，隐藏手机号及时间计算"><a href="#mysql-匹配、环比、同比，隐藏手机号及时间计算" class="headerlink" title="mysql 匹配、环比、同比，隐藏手机号及时间计算"></a>mysql 匹配、环比、同比，隐藏手机号及时间计算</h1><h2 id="like-匹配函数"><a href="#like-匹配函数" class="headerlink" title="like 匹配函数"></a>like 匹配函数</h2><p>用 从concat来连接：activity为参数</p><pre class="line-numbers language-mysql"><code class="language-mysql">and url_current like concat('${activity}','%')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="环比、同比"><a href="#环比、同比" class="headerlink" title="环比、同比"></a>环比、同比</h2><pre class="line-numbers language-mysql"><code class="language-mysql">-- 环比：'2020-01-18' 至 '2020-01-20' 的环比是 '2020-01-15' 至 '2020-01-17' SELECT   DATE_SUB('2020-01-18',INTERVAL (DATEDIFF('2020-01-20','2020-01-18')+1) day), DATE_SUB('2020-01-20',INTERVAL (DATEDIFF('2020-01-20','2020-01-18')+1) day)-- 同比：'2020-01-18' 至 '2020-01-20' 的同比是 '2019-01-18' 至 '2019-01-20' SELECT  DATE_SUB('2020-01-18',INTERVAL 1 year) , DATE_SUB('2020-01-20',INTERVAL 1 year)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手机号隐藏部分位数"><a href="#手机号隐藏部分位数" class="headerlink" title="手机号隐藏部分位数"></a>手机号隐藏部分位数</h2><pre class="line-numbers language-mysql"><code class="language-mysql">concat(left(AES_DECRYPT(from_base64(receive_mobile_no),'密钥'),3),'****',RIGHT(AES_DECRYPT(from_base64(receive_mobile_no),'密钥'),4) )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="支付时间距离现在有多久？"><a href="#支付时间距离现在有多久？" class="headerlink" title="支付时间距离现在有多久？"></a>支付时间距离现在有多久？</h2><pre class="line-numbers language-mysql"><code class="language-mysql">TIMESTAMPDIFF(MINUTE,pay_time,now()) timego<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 帆软 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 帆软 </tag>
            
            <tag> DATE_SUB </tag>
            
            <tag> TIMESTAMPDIFF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何成为世界殿堂级IP？</title>
      <link href="/archives/b1b2a417.html"/>
      <url>/archives/b1b2a417.html</url>
      
        <content type="html"><![CDATA[<p>IP的核心是持续输出内容，持续N年的赚粉丝的钱。</p><p>老规矩，先盘点下已有世界的世界IP。</p><h2 id="世界殿堂级IP排名"><a href="#世界殿堂级IP排名" class="headerlink" title="世界殿堂级IP排名"></a>世界殿堂级IP排名</h2><ul><li>1、宝可梦系列：累计创造出1087亿美元，出自：日本。核心：游戏。</li><li>2、Hello Kitty：价值超过845亿美元；出自：日本。核心：版权。</li><li>3、小熊维尼：累计创造出804亿美元的价值；出自：美国。核心：版权。</li><li>4、米老鼠和朋友们：已创造出803亿美元的价值；出自：美国。核心：版权。</li><li>5、星球大战：价值超过687亿美元。出自：美国。核心：电影。</li><li>6、迪士尼公主，累计创造出464亿美元的价值；出自：美国。核心：电影；</li><li>7、面包超人：创造出449亿美元的价值。出自：日本。核心：漫画；</li><li>8、漫威电影宇宙：价值超过了354亿美元；出自：美国。核心：电影。</li><li>9、任天堂的马里奥：累计创造出348亿美元；出自：日本。 核心：游戏。</li><li>10、哈利波特：累计创造出322亿美元的价值。出自：英国。 核心：小说。 </li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1663401257884-a8b6688e-65be-437d-b9d9-0aff9d989a67.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/674166/1663403469632-ede36b00-bca1-44d5-9393-5b7de4dd0b44.webp" alt="img"></p><h2 id="世界级IP的特点："><a href="#世界级IP的特点：" class="headerlink" title="世界级IP的特点："></a>世界级IP的特点：</h2><ul><li>游戏、小说、电影、漫画均可出现世界级IP；</li><li>非版权授权类IP，如游戏和电影，每隔几年出新作品，源源不断的创造新内容。</li></ul><h3 id="以宝可梦为例：可以无限创造内容。"><a href="#以宝可梦为例：可以无限创造内容。" class="headerlink" title="以宝可梦为例：可以无限创造内容。"></a>以宝可梦为例：可以无限创造内容。</h3><ul><li>粉丝群体量大、稳定，付费意愿高；</li><li>粉丝遍布全世界，有狂热粉丝；</li><li>知名度：家喻户晓也不为过；</li><li>设定：庞大的设定故事和体系架构；</li><li>有令人深刻、令人喜爱的角色、剧情；</li><li>出产内容质量高，粉丝愿意花钱；</li><li>横向跨圈：向动画、周边、版权授权、电影拓展衍生品；</li><li>影响现实,如主体公园、竞技对战；</li><li>每部新作出产100多个原创形象，总会带火几个形成新的小IP，注入新活力。</li><li>完全看不到衰落的迹象。</li></ul><h2 id="国内有望成为世界级IP："><a href="#国内有望成为世界级IP：" class="headerlink" title="国内有望成为世界级IP："></a>国内有望成为世界级IP：</h2><h3 id="原神-游戏："><a href="#原神-游戏：" class="headerlink" title="原神-游戏："></a>原神-游戏：</h3><ul><li>目前已赚23亿美元，预估授权费、周边等百亿美元左右。缺点：可能无法出原神2、3、4这种。能持续挣钱，获得国外认同了，候补世界级IP。</li></ul><h3 id="LOL-游戏"><a href="#LOL-游戏" class="headerlink" title="LOL-游戏"></a>LOL-游戏</h3><ul><li>已百亿美元以上，很难形成IP世界观。没法出2代、3代这种的；但仍旧可以持续赚钱。</li></ul><h3 id="王者荣耀-游戏"><a href="#王者荣耀-游戏" class="headerlink" title="王者荣耀-游戏"></a>王者荣耀-游戏</h3><ul><li>已百亿美元以上，但很难形成IP，脱离游戏没有让粉丝记得住的地方。</li></ul><h3 id="仙剑奇侠传-游戏"><a href="#仙剑奇侠传-游戏" class="headerlink" title="仙剑奇侠传-游戏"></a>仙剑奇侠传-游戏</h3><ul><li>无望，破圈很难。</li></ul><h3 id="金庸、古龙武侠小说系列"><a href="#金庸、古龙武侠小说系列" class="headerlink" title="金庸、古龙武侠小说系列"></a>金庸、古龙武侠小说系列</h3><ul><li>能持续赚钱，但基本不能破圈。</li></ul><h3 id="电影："><a href="#电影：" class="headerlink" title="电影："></a>电影：</h3><ul><li>较拉胯，不谈。</li></ul><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul><li>熊出没、喜洋洋与灰太狼、虹猫蓝兔七侠传等，可以持续赚钱，但是比较难以破圈；</li><li>流浪地球，有刘大小说粉丝基础，目前可以持续赚钱，候补世界级IP；</li></ul><h2 id="出路-："><a href="#出路-：" class="headerlink" title="出路 ："></a>出路 ：</h2><ul><li>游戏最容易形成IP，可以从游戏类入手，不断的出N代，积累粉丝，内容质量要高；</li><li>小说、电影门槛较高，可遇不可求，不太容易积累粉丝赚钱，但是一旦积累成功，则可持续不断的赚钱。</li><li>寻找能比较容易做出游戏，且能后续出动漫、小说、电影、电视剧等补原创剧情、世界观的题材；</li><li>建造一个虚构的世界观，能够调动情绪、认同；</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>国内有望成为世界级IP的不多；</li><li>迪士尼和任天堂是世界文化输出的代表；</li><li>美日文化还是强无敌。如日本还有JUMP、高达、奥特曼、战队、假面骑士、七龙珠、游戏王、生化危机、怪物猎人等候补世界级IP；如美国 DC、变形金刚、使命召唤、玩具总动员等候补世界级IP。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win11使用体验</title>
      <link href="/archives/d782b799.html"/>
      <url>/archives/d782b799.html</url>
      
        <content type="html"><![CDATA[<h2 id="任务栏对比："><a href="#任务栏对比：" class="headerlink" title="任务栏对比："></a>任务栏对比：</h2><ul><li>win11 底端任务栏如下，天气等组件跑到左边了，中间变成软件集合展示了；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656293922362-1100c01e-bdad-495e-af85-6ba016f49a18.png" alt="img"></p><ul><li>win10 底端任务栏如下；</li><li>任务管理器进入方式变更，被集合到开始菜单的右键里了；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656294190475-fa856bc2-5243-4419-b877-feb571183a9c.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656295029766-299d9976-94b0-47e5-9073-c01611b59a46.png" alt="img"></p><h2 id="右键功能变更"><a href="#右键功能变更" class="headerlink" title="右键功能变更"></a>右键功能变更</h2><ul><li>win11 右键菜单整合了，比如一个第三方软件的功能被集成到一个按钮里了，这个很好。</li><li><strong>显示更多选项</strong>变成原版的win10的右键菜单了；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656294817088-90182fd6-eebb-48eb-b66f-bb85b5ed6126.png" alt="img"></p><ul><li>复制、删除、重命名都变成快捷图标了；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656294854787-78e7725d-c5c6-45a0-9477-9461d97e5da1.png" alt="img"></p><h2 id="软件选项"><a href="#软件选项" class="headerlink" title="软件选项"></a>软件选项</h2><ul><li>仿照mac系统集成的软件集合页，其实就是原本的开始菜单</li><li>最好使用搜索按钮，或者点所有应用；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656294916300-2d3d1ce6-1f0d-47e9-9c44-79a08899d6b7.png" alt="img"></p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>部分软件微软商店可以直接安装了，比如python，但是看评论有点坑；</li></ul><h2 id="固定到开始栏"><a href="#固定到开始栏" class="headerlink" title="固定到开始栏"></a>固定到开始栏</h2><ul><li>固定到开始屏幕，方便查询</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656584082148-1978cac4-82f5-48d3-958a-9d37fb358dab.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656584106023-178c939f-6281-4a98-8b25-9c3490aae2b8.png" alt="img"></p><h2 id="滚动条变化："><a href="#滚动条变化：" class="headerlink" title="滚动条变化："></a>滚动条变化：</h2><ul><li>在不选择的情况下，软件下方有个短的横岗，当前使用的话，就会变长；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656395791598-599c9abf-b50a-47ac-8725-b491eb1941d0.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656395824036-10f5ada5-bbbe-496a-962d-a67e07144afe.png" alt="img"></p><ul><li>其他软件的滚动条，是鼠标放上去变粗，方便拖动。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656395888971-7ecb189b-54c5-491c-93af-bb791b94ecbd.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/674166/1656395903007-2a99f161-c643-40dd-9620-c0c6d4fece45.png" alt="img"></p><h2 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h2><ul><li>有提醒颜色会变；</li></ul><h2 id="更新到win11-注意事项："><a href="#更新到win11-注意事项：" class="headerlink" title="更新到win11 注意事项："></a>更新到win11 注意事项：</h2><ul><li>如果是商家预装的win11系统，设置的时候要注意账户问题，如果你不想登录Windows账户，想要用本地账户，一定不要选择使用windows系统账户，否则无法返回设置本地账户的功能，很坑，不给反悔的机会。不知道win10是不是也这样，未实验。</li></ul><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><ul><li>日历问题：农历日历会在重启电脑之后不会再改变，除非再次重启，已反馈，不过好像至今未解决。</li><li>桌面存excel时 反应很慢，2-3秒钟才出来，很慢，且容易卡顿</li><li>偶尔直接自动锁屏，不经常遇到，但是遇到了时是没有点击任何按钮就自动锁屏了，应该不是联想的预装锅吧。</li><li>内核应该还是win10，就套壳，因为主要UI还是win10的UI。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>还是有一定的学习成本的，需要熟悉下操作方式；</li><li>看自己选择要不要升级，要升级可以等到系统稳定一段时间后再升级；</li><li>目前不建议升级。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 产品体验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win11 </tag>
            
            <tag> 产品体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql几个特殊查询</title>
      <link href="/archives/2e493eb7.html"/>
      <url>/archives/2e493eb7.html</url>
      
        <content type="html"><![CDATA[<h2 id="查询行数"><a href="#查询行数" class="headerlink" title="查询行数"></a>查询行数</h2><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT count(*) from a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>直接count(*)就行，mysql对此有特殊优化。<h2 id="查询数据条数"><a href="#查询数据条数" class="headerlink" title="查询数据条数"></a>查询数据条数</h2></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"> SELECT count(null)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上述查询值是0 ，通常与case when 结合使用，舍弃部分数据。<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"> SELECT sum(null)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上述值为null,所以统计求和时，里面带除法的话，最好带个ifnull(a,0)。<h2 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h2></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT id,GROUP_CONCAT(score SEPARATOR '、') as new_socrefrom ( SELECT 'a' as id, 80 as score union all SELECT 'a' as id, 90 as score union all SELECT 'b' as id, 80 as score union all SELECT 'b' as id, 100 as score)a GROUP BY id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上述语句利用group_conat 把列数据转为相应的行数据，SEPARATOR 后面的分隔符可以自己修改。</li><li>注意 GROUP_CONCAT里面的值是有长度限制的，数据量过多的话会 截断或报错。</li></ul><h2 id="无限套娃机制"><a href="#无限套娃机制" class="headerlink" title="无限套娃机制"></a>无限套娃机制</h2><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT *FROM(    SELECT *     FROM    (        SELECT *         FROM        (            SELECT 'a' as id         )a     )a)a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mysql的表是可以无限制套娃的，复杂查询里经常套个好几层的，当然可读性就下降了，不如with语句。</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 特殊查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将表定义转为markdown格式的语句</title>
      <link href="/archives/184bfcc1.html"/>
      <url>/archives/184bfcc1.html</url>
      
        <content type="html"><![CDATA[<h2 id="将表定义-一个转为markdown格式的语句"><a href="#将表定义-一个转为markdown格式的语句" class="headerlink" title="将表定义 一个转为markdown格式的语句"></a>将表定义 一个转为markdown格式的语句</h2><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT CONCAT("## ",table_name," ",table_comment) as tabel_details FROM information_schema.TABLESWHERE TABLE_schema='A'and table_name ='B'UNION ALL SELECT "|字段 | 类型 | 描述|" as tabel_details UNION ALL  SELECT "|---- |---- |----|"  as tabel_detailsUNION ALL SELECT concat("|",COLUMN_NAME,"|",COLUMN_TYPE,"|",COLUMN_COMMENT,"||") from information_schema.COLUMNSWHERE TABLE_schema='A'    and table_name ='B';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表定义 </tag>
            
            <tag> 查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 链接数据库</title>
      <link href="/archives/8791a53a.html"/>
      <url>/archives/8791a53a.html</url>
      
        <content type="html"><![CDATA[<h2 id="链接mysql"><a href="#链接mysql" class="headerlink" title="链接mysql"></a>链接mysql</h2><ul><li>安装pymysql包；</li><li>host不用写端口号；</li><li>已脱敏；<br>```python<br>import pymysql</li></ul><p>connect = pymysql.connect(<br>    host=’aaaaaaa.mysql.rds.aliyuncs.com’,<br>    user=’AAAA’,<br>    password=’AAAAAA’,<br>    db=’test’,<br>    charset=’utf8mb4’<br>)</p><p>cur = connect.cursor()<br>print(cur)</p><pre><code>- 返回数据如下，是一个游标实例对象，表明连接成功。```python&lt;pymysql.cursors.Cursor object at 0x00000164DB2B86A0&gt;</code></pre><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><ul><li>代码如下</li><li>最好每次链接之后都关闭游标，关闭数据库链接<br>```python<br>import pymysql</li></ul><p>connect = pymysql.connect(<br>    host=’aaaaaaa.mysql.rds.aliyuncs.com’,<br>    user=’AAAA’,<br>    password=’AAAAAA’,<br>    db=’test’,<br>    charset=’utf8mb4’<br>)</p><p>cur = connect.cursor()<br>print(cur)</p><p>#创建表</p><p>sql1 =”””<br>CREATE TABLE test01 (<br>    id int(11)  NOT NULL AUTO_INCREMENT COMMENT ‘ID’,<br>    key1 VARCHAR(40) DEFAULT ‘’ COMMENT ‘key1’,<br>    remark varchar(255) DEFAULT ‘’ COMMENT ‘备注’,<br>    state tinyint(4) DEFAULT ‘0’ COMMENT ‘状态 0-正常99-删除 ‘,<br>    version int(11) DEFAULT ‘0’ COMMENT ‘版本号’,<br>    created_at datetime DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建时间’,<br>    created_operator_id varchar(40) DEFAULT ‘’ COMMENT ‘创建人’,<br>    created_operator_name varchar(40) DEFAULT ‘’ COMMENT ‘创建人名称’,<br>    updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT ‘修改日期’,<br>    updated_operator_id varchar(40) DEFAULT ‘’ COMMENT ‘修改人’,<br>    updated_operator_name varchar(40) DEFAULT ‘’ COMMENT ‘修改名称’,<br>    PRIMARY KEY (id),<br>    key ind_key1(key1)<br>)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT ‘测试1’;<br>“””<br>cur.execute(sql1)<br>cur.close<br>connect.close</p><pre><code>- 结果如下，实际确实创建成功了- 但是由于程序是要可以重复执行的，所以要设置异常处理，也可以把sql1变量放到try里；```pythontry:     cur.execute(sql1)except Exception as e:    print("创建数据表失败！",e)else:    print("创建数据表成功！")</code></pre><ul><li><p>报错如下：</p><pre class="line-numbers language-python"><code class="language-python">创建数据表失败！ <span class="token punctuation">(</span><span class="token number">1050</span><span class="token punctuation">,</span> <span class="token string">"Table 'test01' already exists"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2></li><li><p>注意一定要commit,否则实际是不会插入数据的，而且会占用一个自增ID，下一次再插入输入，ID会为3；</p></li><li><p>数据 增、删、改 都需要加commit语句；</p></li><li><p>表结构的增、删、改  都不需要加commit语句,这些是默认commit的；</p><pre class="line-numbers language-python"><code class="language-python">sql2 <span class="token operator">=</span><span class="token triple-quoted-string string">"""INSERT INTO test01(key1)VALUES ("测试");"""</span><span class="token keyword">try</span><span class="token punctuation">:</span>   cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"插入数据表失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"插入数据表成功！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2></li><li><p>查询有点特殊，需要用到游标来进行展示；</p></li><li><p>cur.execute(sql3) 返回是查询的多少条结果</p></li><li><p>fetchone()函数它的返回值是单个的元组，也就是一行记录,如果没有结果,那就会返回null</p></li><li><p>fetchall()函数,它的返回值是多个元组,即返回多个行记录,如果没有结果,返回的是()</p></li><li><p>注意：游标是会顺序访问的，是个迭代器。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询数据</span>sql3 <span class="token operator">=</span><span class="token triple-quoted-string string">"""  SELECT * from test01 WHERE id=1;"""</span><span class="token keyword">try</span><span class="token punctuation">:</span>   cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql3<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询数据表失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询数据表成功！"</span><span class="token punctuation">)</span>  one <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回结果如下：</p><pre class="line-numbers language-python"><code class="language-python">查询数据表成功！<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询所有数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询数据</span>sql3 <span class="token operator">=</span><span class="token triple-quoted-string string">"""  SELECT * from test01 WHERE 1=1;"""</span><span class="token keyword">try</span><span class="token punctuation">:</span>   count<span class="token operator">=</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql3<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询数据表失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询数据表成功！"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询结果是几条数据："</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"其中一条结果是："</span><span class="token punctuation">)</span>  one <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"其中3条结果是："</span><span class="token punctuation">)</span>  many <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>many<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"展示所有结果："</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> each <span class="token keyword">in</span> range<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果如下</p><pre class="line-numbers language-python"><code class="language-python">查询数据表成功！查询结果是几条数据： <span class="token number">8</span>其中一条结果是：<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>其中<span class="token number">3</span>条结果是：<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>展示所有结果：<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>NoneNoneNoneNone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以发现结果不对，这个是游标的顺序访问造成的，除非前面不查。<br>```python</p></li></ul><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><p>sql3 =”””<br>    SELECT * from test01 WHERE 1=1;<br>“””<br>try:<br>    count=cur.execute(sql3)<br>except Exception as e:<br>    print(“查询数据表失败！”,e)<br>else:<br>    print(“查询数据表成功！”)<br>    print(“查询结果是几条数据：”,count)</p><pre><code>print("展示所有结果：")print(cur.fetchall())</code></pre><pre><code>- 结果如下：```python查询数据表成功！查询结果是几条数据： 9展示所有结果：((1, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 29, 48), '', '', datetime.datetime(2022, 7, 1, 10, 29, 48), '', ''), (3, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 33, 13), '', '', datetime.datetime(2022, 7, 1, 10, 33, 13), '', ''), (4, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 35, 32), '', '', datetime.datetime(2022, 7, 1, 10, 35, 32), '', ''), (5, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 38, 22), '', '', datetime.datetime(2022, 7, 1, 10, 38, 22), '', ''), (6, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 52, 26), '', '', datetime.datetime(2022, 7, 1, 10, 52, 26), '', ''), (7, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 56, 9), '', '', datetime.datetime(2022, 7, 1, 10, 56, 9), '', ''), (8, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 58, 27), '', '', datetime.datetime(2022, 7, 1, 10, 58, 27), '', ''), (9, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 10, 59, 4), '', '', datetime.datetime(2022, 7, 1, 10, 59, 4), '', ''), (10, '测试', '', 0, 0, datetime.datetime(2022, 7, 1, 11, 20, 31), '', '', datetime.datetime(2022, 7, 1, 11, 20, 31), '', ''))</code></pre><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><ul><li>把sql1 改成drop语句就行<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除表</span>sql4 <span class="token operator">=</span><span class="token triple-quoted-string string">"""  drop table  if EXISTS test01 ;"""</span><span class="token keyword">try</span><span class="token punctuation">:</span>   count<span class="token operator">=</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql4<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除表失败！"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除表成功！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整语句"><a href="#完整语句" class="headerlink" title="完整语句"></a>完整语句</h2>```python<br>import pymysql</li></ul><p>connect = pymysql.connect(<br>    host=’aaaaaaa.mysql.rds.aliyuncs.com’,<br>    user=’AAAA’,<br>    password=’AAAAAA’,<br>    db=’test’,<br>    charset=’utf8mb4’<br>)</p><p>cur = connect.cursor()<br>print(cur)</p><h1 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h1><p>sql1 =”””<br>CREATE TABLE test01 (<br>    id int(11)  NOT NULL AUTO_INCREMENT COMMENT ‘ID’,<br>    key1 VARCHAR(40) DEFAULT ‘’ COMMENT ‘key1’,<br>    remark varchar(255) DEFAULT ‘’ COMMENT ‘备注’,<br>    state tinyint(4) DEFAULT ‘0’ COMMENT ‘状态 0-正常99-删除 ‘,<br>    version int(11) DEFAULT ‘0’ COMMENT ‘版本号’,<br>    created_at datetime DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建时间’,<br>    created_operator_id varchar(40) DEFAULT ‘’ COMMENT ‘创建人’,<br>    created_operator_name varchar(40) DEFAULT ‘’ COMMENT ‘创建人名称’,<br>    updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT ‘修改日期’,<br>    updated_operator_id varchar(40) DEFAULT ‘’ COMMENT ‘修改人’,<br>    updated_operator_name varchar(40) DEFAULT ‘’ COMMENT ‘修改名称’,<br>    PRIMARY KEY (id),<br>    key ind_key1(key1)<br>)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT ‘测试1’;<br>“””<br>try:<br>    cur.execute(sql1)<br>except Exception as e:<br>    print(“创建数据表失败！”,e)<br>else:<br>    print(“创建数据表成功！”)</p><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>sql2 =”””<br>INSERT INTO test01(key1)<br>VALUES (“测试”);<br>“””<br>try:<br>    cur.execute(sql2)<br>except Exception as e:<br>    print(“插入数据表失败！”,e)<br>else:<br>    connect.commit()<br>    print(“插入数据表成功！”)</p><h1 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h1><p>sql3 =”””<br>    SELECT * from test01 WHERE 1=1;<br>“””<br>try:<br>    count=cur.execute(sql3)<br>except Exception as e:<br>    print(“查询数据表失败！”,e)<br>else:<br>    print(“查询数据表成功！”)<br>    print(“查询结果是几条数据：”,count)</p><pre><code>print("展示所有结果：")print(cur.fetchall())</code></pre><h1 id="删除表-1"><a href="#删除表-1" class="headerlink" title="删除表"></a>删除表</h1><p>sql4 =”””<br>    drop table  if EXISTS test01 ;<br>“””<br>try:<br>    count=cur.execute(sql4)<br>except Exception as e:<br>    print(“删除表失败！”,e)<br>else:<br>    print(“删除表成功！”)</p><p>cur.close<br>connect.close</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 增删改查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>帆软报表查询某字段是否存在，并输出到excel</title>
      <link href="/archives/48cc9777.html"/>
      <url>/archives/48cc9777.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><ul><li><p>有时候mysql某个数据表不再使用或者修改，则需要在一堆报表里（通常有几百或者上千个）找出来使用这个数据表的所有报表并进行修改，我们不可能一个个的去点开来看里面的sql有没有，可以通过python进行快速查找，节约时间。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2></li><li><p>帆软报表文件通常以.cpt结尾，.frm文件不考虑。</p></li><li><p>可以通过OS包来循环查找文件夹下每一个文件，将文件名记录在list里,通过pandas包来输出到excel。</p></li><li><p>软件可以使用anaconda里的自带的VS CODE，这样就不用在本地环境下载pandas等包了，下载速度实在是太慢了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="步骤1：实现循环读取文件名"><a href="#步骤1：实现循环读取文件名" class="headerlink" title="步骤1：实现循环读取文件名"></a>步骤1：实现循环读取文件名</h3></li><li><p>实现循环读取文件的名称；</p></li><li><p>使用<strong>os.walk()</strong> 方法，详细使用见 <a href="https://www.runoob.com/python/os-walk.html">https://www.runoob.com/python/os-walk.html</a>；</p></li><li><p>路径要用r来标识是路径url；<br>```python<br>import os</p></li></ul><p>path = r’D:\softwares\FineReport_10.0\webapps\webroot\WEB-INF\reportlets’<br>findstring = ‘sp_product’</p><p>for root, dirs, files in os.walk(path):<br>    for name in files:<br>        if name.endswith(‘.cpt’):<br>            filepath = open(os.path.join(root, name), ‘r’, encoding=’utf-8’)<br>            if findstring in filepath.read():<br>                print(filepath.name.replace(path, ‘’))</p><pre><code>- 上面的输出是 \a\b\c.cpt  这种格式的### 步骤2：优化- 不符合网址的左斜杠要求，而第一个字符右斜杠是不需要的，我们要去掉，改一下最后一句，在最后加上替换；```python.replace('\\','/') </code></pre><ul><li>把print里的数据改为一个单独的list字段，看起来清楚些；</li><li>利用<strong>切片</strong>功能去掉第一个字符；<br>```python<br>import os</li></ul><p>path = r’D:\softwares\FineReport_10.0\webapps\webroot\WEB-INF\reportlets’<br>findstring = ‘sp_product’<br>liststring = []</p><p>for root, dirs, files in os.walk(path):<br>    for name in files:<br>        if name.endswith(‘.cpt’):<br>            filepath = open(os.path.join(root, name), ‘r’, encoding=’utf-8’)<br>            if findstring in filepath.read():<br>                filename = filepath.name.replace(path, ‘’).replace(‘\‘,’/‘)<br>                liststring.append(filename[1:])<br>                print(liststring)</p><pre><code>- 上面的输出结果是 ['a/b/c.cpt'] 这种格式的，接下来就是存储到excel里了;### 步骤3：存储到excel- 利用pandas包的to_excel来输出到excel里；- 文件路径的 **D:\files\ **可以去掉，这样就是相对路径了，文件会生成在当前目录下；```pythonimport osimport pandas as pdpath = r'D:\softwares\FineReport_10.0\webapps\webroot\WEB-INF\reportlets'findstring = 'sp_product'liststring = []for root, dirs, files in os.walk(path):    for name in files:        if name.endswith('.cpt'):            filepath = open(os.path.join(root, name), 'r', encoding='utf-8')            if findstring in filepath.read():                filename = filepath.name.replace(path, '').replace('\\','/')                 liststring.append(filename[1:])                #print(liststring)df = pd.DataFrame(liststring,columns=['报表名称'])excelname = r"D:\files\帆软报表中存在"+findstring+"数据的文件名称.xlsx"df.to_excel(excelname,index=False)print("输出到excel成功！")</code></pre><h3 id="步骤4：优化"><a href="#步骤4：优化" class="headerlink" title="步骤4：优化"></a>步骤4：优化</h3><ul><li>实际上，没有查找到数据的话，并不需要输出excel；</li><li>文件名最好带上当前日期，方便识别；</li><li>今天查询是** datetime<strong>包的</strong>today= datetime.date.today()** ，不过要转换为字符串；<br>```python<br>import os<br>import pandas as pd<br>import datetime</li></ul><p>path = r’D:\softwares\FineReport_10.0\webapps\webroot\WEB-INF\reportlets’<br>findstring = ‘sp_product’<br>liststring = []</p><p>for root, dirs, files in os.walk(path):<br>    for name in files:<br>        if name.endswith(‘.cpt’):<br>            filepath = open(os.path.join(root, name), ‘r’, encoding=’utf-8’)<br>            if findstring in filepath.read():<br>                filename = filepath.name.replace(path, ‘’).replace(‘\‘,’/‘)<br>                liststring.append(filename[1:])<br>                #print(liststring)</p><p>if len(liststring)==0:<br>    print(“未找到此字段！”)<br>else :<br>    today= datetime.date.today()<br>    df = pd.DataFrame(liststring,columns=[‘报表名称’])<br>    excelname = r”D:\files\帆软报表中存在”+findstring+”数据的文件名称-“+today.strftime(‘%Y-%m-%d’)+”.xlsx”<br>    df.to_excel(excelname,index=False)<br>    print(“输出到excel成功！”)</p><pre><code>### 步骤5：检测是否有bug- 目前看来暂无bug；- 是否有其他优化点：当然是有的，比如写成几个函数，文件路径判断，等等，这个由于是自己用的，就不用这么麻烦了。</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查询 </tag>
            
            <tag> 帆软 </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《银河系宪法》</title>
      <link href="/archives/fcd26d55.html"/>
      <url>/archives/fcd26d55.html</url>
      
        <content type="html"><![CDATA[<h1 id="《银河系宪法》"><a href="#《银河系宪法》" class="headerlink" title="《银河系宪法》"></a>《银河系宪法》</h1><h2 id="序言："><a href="#序言：" class="headerlink" title="序言："></a>序言：</h2><ul><li>为保证银河系各生命星球能够持续发展，特制定本宪法。</li></ul><h2 id="第一章：总纲"><a href="#第一章：总纲" class="headerlink" title="第一章：总纲"></a>第一章：总纲</h2><ol><li>本宪法仅限银河系内使用，银河系系外无需遵守。</li><li>本宪法基于 生命存续理念 而设立。</li><li>本宪法由银河系X公民建立、执行、更新。</li><li>本宪法强制执行。</li><li>本宪法，X公民亦遵守执行。</li></ol><h2 id="第二章：基本定义"><a href="#第二章：基本定义" class="headerlink" title="第二章：基本定义"></a>第二章：基本定义</h2><ol><li><p>公民：能够理解数学及逻辑，并能发明创造的智能生命族群，即为本宪法认定的公民。公民认定时间为追溯认定。</p></li><li><p>附属公民：公民所在恒星系内的其他智能生命族群，作为该公民的依附族群。公民与附属公民的区别 以起源时间来区分。</p></li><li><p>物质资源认定：本宪法认定 公民所在的起源星球 所属的恒星系内的所有一切 均为 该公民拥有的物质资源。</p></li><li><p>非物质资源认定：公民的认知。</p></li><li><p>领土：公民所在恒星系；</p></li><li><p>等级认定：本宪法基于银河系内各生命情况，划分为以下等级，如有异议，请来X公民领土内讨论：</p><ul><li>末等：无法大规模离开起源星球的公民；</li><li>中等：无法大规模去往起源小星系外；</li><li>高等：无法大规模去往 银河系其他悬臂</li><li>特等：无法大规模去往银河系外；</li></ul></li><li><p>文明公民：本宪法认定为含有以下特点的公民为文明公民：</p><ul><li>公民 100个 个体生命周期内 未发生任何战争；</li><li>公民100个 个体生命周期内 认知持续发展；</li><li>公民内个体无侵略、战争意向。</li></ul></li></ol><h3 id="第三章：权利及义务"><a href="#第三章：权利及义务" class="headerlink" title="第三章：权利及义务"></a>第三章：权利及义务</h3><ol><li>公民、附属公民，相互之间不得将对方作为其食物链中的一环，要相互尊重。</li><li>公民之间不得相互侵略、掠夺对方资源，不得彻底灭绝对方。</li><li>公民不得私自掠夺其他公民基因,不得私自制造其他公民的个体；</li><li>任何公民均可以使用 无生命星系进行生命创造实验。</li><li>公民不得擅自直接、隐晦传授任何本公民所拥有的认知，除非得到X公民的授权。</li><li>在某星系进化出现公民个体后，任何其他公民不得继续干扰其发展，并需抹除自身痕迹。</li><li>高等级公民不得擅自出现在低等公民领土范围内。</li><li>高等级公民不得干扰其他公民在末等发展阶段的任何发展。</li><li>在X公民的授权下，可对文明公民给予适当的非物质资源援助。</li><li>如有违反者，由本X公民所在法院 进行裁判、执行，具体执行方案包括但不限于 降低其母星所在恒星寿命、封锁其认知、彻底灭绝公民等。</li></ol><h2 id="第四章：-其他"><a href="#第四章：-其他" class="headerlink" title="第四章： 其他"></a>第四章： 其他</h2><ol><li><p>欢迎各位加入银河生命大家庭；</p></li><li><p>本宪法每隔一个银河纪元更新一次。</p></li><li><p>如您未接到本次银河系全域声明，则表明您正处于末等发展等级，请继续发展到高等阶段。</p></li></ol><p>  编撰者：</p><ul><li>银河系X公民</li></ul><p>校对者：</p><ul><li>银河系X公民个体：洛神葵</li></ul><p>版本：</p><ul><li>8.0</li></ul><p>更新时间：</p><ul><li>银河纪元8纪元56段23位</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql分组后排序</title>
      <link href="/archives/dcce0de4.html"/>
      <url>/archives/dcce0de4.html</url>
      
        <content type="html"><![CDATA[<p>创建表：</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `test_user_scores` (  `id` int NOT NULL AUTO_INCREMENT COMMENT 'ID',  `user_id` int NOT NULL DEFAULT '0' COMMENT '用户ID',  `group_id` int NOT NULL DEFAULT '0' COMMENT '分组ID',  `scores` int NOT NULL DEFAULT '0' COMMENT '分数',  PRIMARY KEY (`id`),  KEY `ind_user_id` (`user_id`),  KEY `ind_group_id` (`group_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='分组分数表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">INSERT INTO `test`.`test_user_scores` (`id`, `user_id`, `group_id`, `scores`) VALUES (1, 1, 1, 80),(2, 1, 2, 78),(3, 1, 1, 99),(4, 2, 2, 11),(5, 2, 2, 88),(6, 2, 2, 77),(7, 1, 1, 18),(8, 1, 1, 78),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql 版本：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT version();  -- 8.0.25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>取每人每组最高分</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT user_id,group_id, max(scores) as max_scoresfrom test_user_scoresGROUP BY user_id,group_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>取每人top3分数</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT user_id,scores,row_num from (SELECT user_id,scores,IF(@field=user_id,@rownum:=@rownum+1,@rownum:=1) as row_num, @field:=user_idFROM    ( SELECT user_id, scores     from test_user_scores    order by user_id, scores desc     ) a , ( SELECT @rownum:=0,@field:='') b&nbsp;) c WHERE c.row_num <=3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>取每人每组top3分数 </li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT user_id,group_id,scores,row_num1,row_num2 from (    SELECT user_id,group_id,scores,IF(@field=user_id,@rownum1:=@rownum1+1,@rownum1:=1) as row_num1,    IF(@field=user_id && @field2=group_id,@rownum2:=@rownum2+1,@rownum2:=1) as row_num2,    @field:=user_id,@field2:=group_id     FROM        (             SELECT user_id,group_id, scores             from test_user_scores            order by user_id,group_id, scores desc         ) a , ( SELECT @rownum1:=0, @rownum2:=0,@field:='',@field2:='') b&nbsp;) c WHERE c.row_num2 <=3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用窗口函数实现</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT row_number()over(partition by group_id,user_id order by scores desc) as rn,user_Id,group_id,scores FROM test_user_scores<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考资料：</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分组 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python遍历文件夹</title>
      <link href="/archives/5a8a6c8d.html"/>
      <url>/archives/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<p>​    最近在学习python，分享一些自己写的小功能</p><h2 id="1-遍历文件夹下文件"><a href="#1-遍历文件夹下文件" class="headerlink" title="1.遍历文件夹下文件"></a>1.遍历文件夹下文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> r<span class="token string">'E:\files\files'</span><span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># root 表示当前正在访问的文件夹路径</span>    <span class="token comment" spellcheck="true"># dirs 表示该文件夹下的子目录名list</span>    <span class="token comment" spellcheck="true"># files 表示该文件夹下的文件list</span>    <span class="token comment" spellcheck="true"># 遍历文件</span><span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 遍历所有的文件夹</span><span class="token keyword">for</span> d <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><ul><li>如果replace的old_string改为root,则不会出现父级路径；</li></ul><h2 id="2-查找文件夹下文件中的内容"><a href="#2-查找文件夹下文件中的内容" class="headerlink" title="2.查找文件夹下文件中的内容"></a>2.查找文件夹下文件中的内容</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 遍历所有帆软报表，找出包含union的文件</span>path <span class="token operator">=</span> r<span class="token string">'D:\softwares\FineReport_10.0\webapps\webroot\WEB-INF\reportlets'</span>findstring <span class="token operator">=</span> <span class="token string">'union'</span><span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.cpt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            filepath <span class="token operator">=</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> findstring  <span class="token keyword">in</span> filepath<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span>name<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><ul><li>文件最好打开的时候就指定格式</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 遍历文件夹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用存储过程水平分表</title>
      <link href="/archives/2e493eb7.html"/>
      <url>/archives/2e493eb7.html</url>
      
        <content type="html"><![CDATA[<p>​    我们经常会遇到一些数据表，数据量过大，比如日志表，每天产生几十万条数据，这样积累下来非常不利于数据库查询和维护，有时候甚至连<code>select count(*) from table a</code> 都查不出来，为避免这种情况产生，通常会按照数据创建时间，来按年按月或者按季度进行分表，原表只保留几个月的数据。如下所示，用存储过程来进行处理。</p><p>​    逻辑 就是 先创建分表，结构和原表相同，然后再插入数据，再删除原表插入历史表的数据。</p><h2 id="分表存储过程"><a href="#分表存储过程" class="headerlink" title="分表存储过程"></a>分表存储过程</h2><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DEFINER=`XXX`@`%` PROCEDURE `up_clear_table_a`()BEGIN    -- 自动前30天前的数据到历史表中    DECLARE v_stat_date DATE;    DECLARE v_table_name VARCHAR(50);    DECLARE v_str VARCHAR(2000);    SET v_stat_date=DATE_SUB(CURRENT_DATE(),INTERVAL 30 DAY);    SET v_table_name=CONCAT('table_a_',DATE_FORMAT(v_stat_date,'%Y'));           SET v_str=CONCAT('create table if not exists ',v_table_name,'(         id varchar(40) NOT NULL DEFAULT '''' COMMENT ''id'',         type tinyint(4) DEFAULT ''0'' COMMENT ''类型'',         remark varchar(255) DEFAULT '''',         state tinyint(4) DEFAULT ''0'' COMMENT ''状态'',         created_at datetime DEFAULT CURRENT_TIMESTAMP COMMENT ''创建时间'',         created_operator_id varchar(40) DEFAULT '''' COMMENT ''创建人'',         created_operator_name varchar(40) DEFAULT '''' COMMENT ''创建人名称'',         PRIMARY KEY (id),       ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=''表''');           SET @sql=v_str;    PREPARE stmt FROM @sql;     EXECUTE stmt;      DEALLOCATE PREPARE stmt;            SET v_str=CONCAT('insert into ',v_table_name,'          select * from table_a where created_at>=''',v_stat_date,''' and created_at<date_add(''',v_stat_date,''',interval 1 day)');    SET @sql=v_str;    PREPARE stmt FROM @sql;     EXECUTE stmt;      DEALLOCATE PREPARE stmt;                DELETE FROM table_a    WHERE created_at>=v_stat_date AND created_at<DATE_ADD(v_stat_date,INTERVAL 1 DAY);    END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><ul><li>也可以使用 <code>create TABLE if not exists table_b like table_a;</code>来进行复制表，只复制表结构不复制数据；</li><li><code>if not exists</code> 是必须要写的，不然报错的话就执行不下去了；</li><li>单引号 两边都需要加个单引号</li></ul><h3 id="PREPARE-预处理语句"><a href="#PREPARE-预处理语句" class="headerlink" title="PREPARE 预处理语句"></a>PREPARE 预处理语句</h3><pre class="line-numbers language-msyql"><code class="language-msyql">PREPARE stmt FROM @sql; EXECUTE stmt;  DEALLOCATE PREPARE stmt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这三句是固定式语句，第一句式 预定义好动态sql语句 stmt，第二句毫无疑问是执行语句，第三局是删除预定义语句stmt。</p><p>DEALLOCATE 英文翻译就是 <code>释放; 解除分配; 释放游标; 删除一个准备好的查询; 归还;</code></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 水平分表 </tag>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql字符串拆分为列数据</title>
      <link href="/archives/fc8e7585.html"/>
      <url>/archives/fc8e7585.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql字符串拆分为列数据"><a href="#mysql字符串拆分为列数据" class="headerlink" title="mysql字符串拆分为列数据"></a>mysql字符串拆分为列数据</h1><p>有些时候，我们需要把字符串行转为列，这时候我们可以通过mysql.help_topic表来协助操作，help_topic_id 是从零开始的整数自增列。</p><p>mysql.help_topic表是数据库mysql下的一个表，可以用 <code>desc help_topic</code>命令看到表的定义；</p><p><img src="https://cdn.jsdelivr.net/gh/LuoShenKui/cdn/img/help_topic.png"></p><p>需要注意的是，转为的列数据的行数不得超过mysql.help_topic.help_topic_id的最大值；也可用用其他从0开始的整数自增列（中间不能有跳跃）来代替此字段；</p><h2 id="例：把“广东-江西-海南-湖南-安徽”-字符串拆分为列数据；"><a href="#例：把“广东-江西-海南-湖南-安徽”-字符串拆分为列数据；" class="headerlink" title="例：把“广东,江西,海南,湖南,安徽” 字符串拆分为列数据；"></a>例：把“广东,江西,海南,湖南,安徽” 字符串拆分为列数据；</h2><pre class="line-numbers language-mysql"><code class="language-mysql"> SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(a.addr,',',b.help_topic_id+1),',',-1) as addr FROM (SELECT '广东,江西,海南,湖南,安徽' as addr) a JOIN mysql.help_topic b on b.help_topic_id<(LENGTH(a.addr)-LENGTH(REPLACE(a.addr,',',''))+1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/LuoShenKui/cdn/img/provice.png"></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>如果字符串最后也有一个逗号，则会额外多拆出来一个空字符串列，这时可以把on条件后面的+1给去掉；</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="SUBSTRING-INDEX（str-delim-count）"><a href="#SUBSTRING-INDEX（str-delim-count）" class="headerlink" title="SUBSTRING_INDEX（str,delim,count）"></a><strong>SUBSTRING_INDEX（str,delim,count）</strong></h4><ul><li>str 是字符串，这里是 addr ； delim 是分隔符，这里是逗号；count是计数。</li><li>返回 字符串str的第count 出现的分隔符的之前（后）的数据；</li><li>如果count 是正数，则是返回第 count 个字符左边的字符串（从左往右）。</li><li>如果count 是负数，则是返回第 （number 的绝对值）个字符右边的字符串（从右往左）。</li></ul><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p><code> SELECT SUBSTRING_INDEX("广东,江西,海南,湖南,安徽",',',2)</code> </p><p>结果是 <code>广东,江西</code></p><p> ``SELECT SUBSTRING_INDEX(“广东,江西,海南,湖南,安徽”,’,’,-2)`</p><p>结果是 <code>湖南,安徽</code> </p><p>这里是采用先取左列数据，再取右边第一个数据，就可以得到第N个数据；</p><p> <code>SELECT SUBSTRING_INDEX(SUBSTRING_INDEX("广东,江西,海南,湖南,安徽",',',2),',',-1)</code> </p><p>结果是 <code>江西</code></p><h4 id="length-str-函数"><a href="#length-str-函数" class="headerlink" title="length(str)函数"></a>length(str)函数</h4><ul><li>length()函数用于获取字符串的长度；</li><li>一个汉字算3个字符，一个数字或字母算一个字符；</li></ul><h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h5><p> <code>SELECT LENGTH("广东,江西")</code>结果是13。</p><h4 id="replace-a-b-c"><a href="#replace-a-b-c" class="headerlink" title="replace(a,b,c)"></a>replace(a,b,c)</h4><ul><li>将字符串a中的b 替换为c;</li><li>a,b,c 均为字符串；</li></ul><h5 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT replace("广东,江西,海南,湖南,安徽",",","、")</code> </p><p>结果是 <code>广东、江西、海南、湖南、安徽</code></p><h2 id="扩展应用：查询-某段日期-的列数据；"><a href="#扩展应用：查询-某段日期-的列数据；" class="headerlink" title="扩展应用：查询 某段日期 的列数据；"></a>扩展应用：查询 某段日期 的列数据；</h2><pre class="line-numbers language-mysql"><code class="language-mysql">select date_format(date_sub('2021-07-12', interval help_topic_id day),'%Y-%m-%d') as dates from  mysql.help_topic   where  help_topic_id<=DATEDIFF('2021-07-12','2021-06-01') ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/LuoShenKui/cdn/img/date.png"></p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul><li>这条语句经常用于  查询很长一段日期的统计数据，如某段时间内每天的消费数据。由于存在意外情况，某天可能没数据，但是也是要展示，可以用这条语句查询 作为主表来left join;</li></ul><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><h4 id="date-sub-date-INTERVAL-expr-type-函数"><a href="#date-sub-date-INTERVAL-expr-type-函数" class="headerlink" title="date_sub (date,INTERVAL expr type) 函数"></a>date_sub (date,INTERVAL expr type) 函数</h4><ul><li>date是日期，expr是 时间间隔，type是时分秒日周月年等，详见<a href="https://www.runoob.com/sql/func-date-sub.html">MySQL DATE_SUB()</a> 函数用法 ，这里不再解释了；</li></ul><h5 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT date_sub('2021-07-12', interval 2 day);</code></p><p>结果是 <code>2021-07-10</code></p><h4 id="date-format-date-format"><a href="#date-format-date-format" class="headerlink" title="date_format(date,format)"></a>date_format(date,format)</h4><ul><li>date 日期,format 是格式，年月日 是 ‘%Y-%m-%d’。其余字段详见 <a href="https://www.runoob.com/sql/func-date-format.html">MySQL DATE_FORMAT() 函数</a></li></ul><h5 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT DATE_FORMAT(CURRENT_DATE(),"%Y-%m-%d %H:%i:%s")</code></p><h4 id="DATEDIFF-date1-date2"><a href="#DATEDIFF-date1-date2" class="headerlink" title="DATEDIFF(date1,date2)"></a>DATEDIFF(date1,date2)</h4><ul><li>date1和date2 是日期，返回 date1 和date2 之间的天数,即  date1-date2 的天数;</li></ul><h5 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h5><p><code>SELECT DATEDIFF('2021-07-12','2021-07-10')</code> </p><p>结果是 <code>2</code> </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> help_topic </tag>
            
            <tag> substring_index </tag>
            
            <tag> date_sub </tag>
            
            <tag> datediff </tag>
            
            <tag> 字符串转列操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客版本更新日志</title>
      <link href="/archives/5610cf1c.html"/>
      <url>/archives/5610cf1c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本篇用于介绍本博客网站更新的日志。</p><h2 id="版本更新记录"><a href="#版本更新记录" class="headerlink" title="版本更新记录"></a>版本更新记录</h2><h3 id="20210711"><a href="#20210711" class="headerlink" title="- 20210711"></a>- 20210711</h3><ul><li>备案成功！</li><li>双备份成功！接下来进入稳定期!</li></ul><h3 id="20210619"><a href="#20210619" class="headerlink" title="- 20210619"></a>- 20210619</h3><ul><li>趁着阿里云618活动买了个服务器，把备案给搞起来，网站命名比较严格，等待审核中；</li></ul><h3 id="20210613"><a href="#20210613" class="headerlink" title="- 20210613"></a>- 20210613</h3><ul><li><p>倒腾了几天，博客正式上线；</p></li><li><p>申请了域名，解析到个人github服务器页面上；</p></li><li><p>向百度和谷歌递交了收录请求，谷歌第二天就收录了，分析数据也有了，百度迟迟未收录！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建设</title>
      <link href="/archives/36b0b24c.html"/>
      <url>/archives/36b0b24c.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​    一时兴起，倒腾了几天终于把个人博客弄得差不多了，后续再修修补补就可以了。</p><p>​    本博客基于<strong>Hexo</strong>框架搭建，用到了<strong>hexo-theme-matery</strong> 主体，仿照<a href="https://sunhwee.com/posts/6e8839eb.html">洪卫大佬</a>的详细介绍，一步步走下来就可以了。下面我介绍一下我操作过程中遇到的问题，供大家参考。</p><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><h3 id="1-博客文件名称"><a href="#1-博客文件名称" class="headerlink" title="1.博客文件名称"></a>1.博客文件名称</h3><p>​    如果是直接从github上下载 <a href="https://github.com/shw2018/hexo-theme-matery">hexo-theme-matery</a>源码，如果下载的是zip格式，则是会带 master等分支名称，下载解压完之后记得要去掉分支名称。git clone 的话就没这个问题。</p><h3 id="2-依赖github"><a href="#2-依赖github" class="headerlink" title="2.依赖github"></a>2.依赖github</h3><p>​    根目录下的_config.yml 文件中的依赖，有两个注意点：</p><ul><li>一个是仓库要写成SSH格式的，不要写成https 格式的，如果写成 <a href="https://github.com/XXXX.git">https://github.com/XXXX.git</a> 这种格式的，则在你提交更新的时候，会让你输入登录密码（<del>十分痛苦！</del>）。</li><li>分支要写成master或者是main,跟你的仓库保持一致，要么改配置这里，要么改github 仓库的分支；</li></ul><pre class="line-numbers language-Yml"><code class="language-Yml">deploy: type: git repository: git@github.com:LuoShenKui/LuoShenKui.github.io.git branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置修改注意事项"><a href="#3-配置修改注意事项" class="headerlink" title="3. 配置修改注意事项"></a>3. 配置修改注意事项</h3><p>​    注意修改配置时：</p><ul><li>冒号需要是英文的，不能是中文的。</li><li>冒号与后续的配置要隔开一个空格！</li><li>不要用TXT文件打开配置进行修改，最好用VSCODE之类的软件打开。（假设你用txt修改，然后生成网页的时候报错了，你就知道痛苦了！找不到哪里有问题！）</li><li>VSCODE 要单独关闭页面才会提示保存，如果直接关闭软件是不会保存的。</li></ul><h3 id="4-LOGO设计"><a href="#4-LOGO设计" class="headerlink" title="4.LOGO设计"></a>4.LOGO设计</h3><p>​    我是拿画图工具直接画了一个，避免各种问题，后续再替换掉吧（笑）。注意logo文件不要太大。</p><h3 id="5-设置B站链接"><a href="#5-设置B站链接" class="headerlink" title="5.设置B站链接"></a>5.设置B站链接</h3><p>​    我去 <a href="https://fontawesome.com/icons">Font Awesome</a> 里没有找到B站的图标，就用了fa-bootstrap 的图标。</p><pre class="line-numbers language-ejs"><code class="language-ejs"><% if (theme.socialLink.bilibili) { %>    <a href="<%= theme.socialLink.bilibili %>" class="tooltipped" target="_blank" data-tooltip="关注我的B站: <%= theme.socialLink.bilibili %>" data-position="top" data-delay="50">        <i class="fab fa-bootstrap">站</i>    </a><% } %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-live2d问题"><a href="#6-live2d问题" class="headerlink" title="6.live2d问题"></a>6.live2d问题</h3><p>​    我设置了live2d,但是在右边的话会遮挡按钮，在配置里改到左边就可以了。</p><h3 id="7-文章编写"><a href="#7-文章编写" class="headerlink" title="7.文章编写"></a>7.文章编写</h3><ul><li>表头也要是冒号+空格的方式；</li></ul><h3 id="8-谷歌验证域名所有权问题"><a href="#8-谷歌验证域名所有权问题" class="headerlink" title="8.谷歌验证域名所有权问题"></a>8.谷歌验证域名所有权问题</h3><ul><li>谷歌验证DNS的时候，填写解析的时候由于会跟@解析冲突，可以把解析线路改为境外，不要写成谷歌。</li><li>添加顺序不能变！先输入主机记录@，再选择TXT记录类型，然后再复制TXT记录进入记录值内。</li></ul><h3 id="9-域名和备案"><a href="#9-域名和备案" class="headerlink" title="9.域名和备案"></a>9.域名和备案</h3><ul><li>域名和服务器我选的都是阿里云的，由于是首单用户，优惠还可以；</li><li>备案就取名要求比较严格，记得不要乱取；</li><li><strong>备案时一定要关闭网站</strong>，我第一次就因为这个原因失败了！最好也关闭讨论区。</li></ul><h3 id="10-谷歌分析"><a href="#10-谷歌分析" class="headerlink" title="10. 谷歌分析"></a>10. 谷歌分析</h3><ul><li>谷歌分析有数据了！页面也是第二天就收录了！</li></ul><h3 id="11-coding-双备份"><a href="#11-coding-双备份" class="headerlink" title="11.coding 双备份"></a>11.coding 双备份</h3><ul><li><p>coding 部署网站需要开通腾讯云，而且部署成功之后的链接基本不能用，太长了太乱了，如果没有购买自定义域名的话<strong>不建议</strong>部署coding！</p></li><li><p>自定义域名最好添加两个，一个带 <code>www.</code>，一个不带 <code>www.</code></p></li><li><p>自定义域名前腾讯要求国内服务器必须已备案完成！</p></li></ul><h3 id="12-图片"><a href="#12-图片" class="headerlink" title="12. 图片"></a>12. 图片</h3><ul><li>图片使用picgo图床，还算方便；</li></ul><h3 id="13-备份"><a href="#13-备份" class="headerlink" title="13. 备份"></a>13. 备份</h3><ul><li>由于博客本身带有各种密钥，所以不适合放在公开仓库里，可以在github上建个私有仓库进行存放；</li><li>前几天硬盘突然分区损坏（用了4年多了！<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>），无奈格式化，导致从备份仓库上下载下来的数据少了很多（如node_modules文件夹被过滤掉了），无奈再次手动下载更新了一遍。。。所以最好还是定时全部打包备份一遍。</li></ul><h3 id="14-百度收录"><a href="#14-百度收录" class="headerlink" title="14. 百度收录"></a>14. 百度收录</h3><ul><li>如果你百度站点是带www的，而你站点url 是不带 www 的，此时使用主动推送的话，可能会显示提交失败，站点改成带www的就可以了（百度已提交的站点改不了！），或者不用主动推送也是可以的；</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>​    其他问题可在评论区指出，大家一起学习。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> GitHub </tag>
            
            <tag> hexo </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
